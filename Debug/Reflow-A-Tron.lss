
Reflow-A-Tron.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000031e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002aa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000031e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000031e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000350  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001666  00000000  00000000  000004ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c3a  00000000  00000000  00001b12  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007f1  00000000  00000000  0000274c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000364  00000000  00000000  00002f40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000094c  00000000  00000000  000032a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c1d  00000000  00000000  00003bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  0000480d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 ba 00 	jmp	0x174	; 0x174 <__vector_13>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__vector_20>
  54:	0c 94 29 01 	jmp	0x252	; 0x252 <__vector_21>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d0 e1       	ldi	r29, 0x10	; 16
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	ea ea       	ldi	r30, 0xAA	; 170
  84:	f2 e0       	ldi	r31, 0x02	; 2
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a0 30       	cpi	r26, 0x00	; 0
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	a0 e0       	ldi	r26, 0x00	; 0
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a2 30       	cpi	r26, 0x02	; 2
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 57 00 	call	0xae	; 0xae <main>
  a6:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <main>:

#include <avr/io.h>


int main(void)
{
  ae:	ff cf       	rjmp	.-2      	; 0xae <main>

000000b0 <_ZN10RingBuffer11get_elementEPh>:
  buf[next_slot()] = data;
  head = next_slot();
  return true;
}

bool RingBuffer::get_element(uint8_t* out_buf){
  b0:	fc 01       	movw	r30, r24
  if(head == tail){
  b2:	86 81       	ldd	r24, Z+6	; 0x06
  b4:	97 81       	ldd	r25, Z+7	; 0x07
  b6:	24 81       	ldd	r18, Z+4	; 0x04
  b8:	35 81       	ldd	r19, Z+5	; 0x05
  ba:	28 17       	cp	r18, r24
  bc:	39 07       	cpc	r19, r25
  be:	c1 f0       	breq	.+48     	; 0xf0 <_ZN10RingBuffer11get_elementEPh+0x40>
    return false;
  }
  
  *out_buf = buf[tail];
  c0:	20 81       	ld	r18, Z
  c2:	31 81       	ldd	r19, Z+1	; 0x01
  c4:	d9 01       	movw	r26, r18
  c6:	a8 0f       	add	r26, r24
  c8:	b9 1f       	adc	r27, r25
  ca:	8c 91       	ld	r24, X
  cc:	db 01       	movw	r26, r22
  ce:	8c 93       	st	X, r24
  if(tail + 1 == capacity){
  d0:	86 81       	ldd	r24, Z+6	; 0x06
  d2:	97 81       	ldd	r25, Z+7	; 0x07
  d4:	01 96       	adiw	r24, 0x01	; 1
  d6:	22 81       	ldd	r18, Z+2	; 0x02
  d8:	33 81       	ldd	r19, Z+3	; 0x03
  da:	82 17       	cp	r24, r18
  dc:	93 07       	cpc	r25, r19
  de:	21 f4       	brne	.+8      	; 0xe8 <_ZN10RingBuffer11get_elementEPh+0x38>
    tail = 0;
  e0:	17 82       	std	Z+7, r1	; 0x07
  e2:	16 82       	std	Z+6, r1	; 0x06
  } else {
    tail++;
  }
  return true;
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	08 95       	ret
  
  *out_buf = buf[tail];
  if(tail + 1 == capacity){
    tail = 0;
  } else {
    tail++;
  e8:	97 83       	std	Z+7, r25	; 0x07
  ea:	86 83       	std	Z+6, r24	; 0x06
  }
  return true;
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	08 95       	ret
  return true;
}

bool RingBuffer::get_element(uint8_t* out_buf){
  if(head == tail){
    return false;
  f0:	80 e0       	ldi	r24, 0x00	; 0
    tail = 0;
  } else {
    tail++;
  }
  return true;
}
  f2:	08 95       	ret

000000f4 <_ZN10RingBuffer9next_slotEv>:

uint16_t RingBuffer::slots_available(){
  return capacity - stored_elements();
}

int32_t RingBuffer::next_slot(){
  f4:	fc 01       	movw	r30, r24
  int32_t next = 0;
  if(head + 1 >= capacity){
  f6:	44 81       	ldd	r20, Z+4	; 0x04
  f8:	55 81       	ldd	r21, Z+5	; 0x05
  fa:	4f 5f       	subi	r20, 0xFF	; 255
  fc:	5f 4f       	sbci	r21, 0xFF	; 255
  fe:	82 81       	ldd	r24, Z+2	; 0x02
 100:	93 81       	ldd	r25, Z+3	; 0x03
 102:	48 17       	cp	r20, r24
 104:	59 07       	cpc	r21, r25
 106:	18 f4       	brcc	.+6      	; 0x10e <_ZN10RingBuffer9next_slotEv+0x1a>
    next = 0;
  } else {
    next = head + 1;
 108:	60 e0       	ldi	r22, 0x00	; 0
 10a:	70 e0       	ldi	r23, 0x00	; 0
 10c:	03 c0       	rjmp	.+6      	; 0x114 <_ZN10RingBuffer9next_slotEv+0x20>
}

int32_t RingBuffer::next_slot(){
  int32_t next = 0;
  if(head + 1 >= capacity){
    next = 0;
 10e:	40 e0       	ldi	r20, 0x00	; 0
 110:	50 e0       	ldi	r21, 0x00	; 0
 112:	ba 01       	movw	r22, r20
  } else {
    next = head + 1;
  }
  
  if(next == tail){
 114:	86 81       	ldd	r24, Z+6	; 0x06
 116:	97 81       	ldd	r25, Z+7	; 0x07
 118:	a0 e0       	ldi	r26, 0x00	; 0
 11a:	b0 e0       	ldi	r27, 0x00	; 0
 11c:	48 17       	cp	r20, r24
 11e:	59 07       	cpc	r21, r25
 120:	6a 07       	cpc	r22, r26
 122:	7b 07       	cpc	r23, r27
 124:	29 f0       	breq	.+10     	; 0x130 <_ZN10RingBuffer9next_slotEv+0x3c>
    return -1;
  } else {
    return next;
 126:	34 2f       	mov	r19, r20
 128:	25 2f       	mov	r18, r21
 12a:	86 2f       	mov	r24, r22
 12c:	97 2f       	mov	r25, r23
 12e:	04 c0       	rjmp	.+8      	; 0x138 <_ZN10RingBuffer9next_slotEv+0x44>
  } else {
    next = head + 1;
  }
  
  if(next == tail){
    return -1;
 130:	3f ef       	ldi	r19, 0xFF	; 255
 132:	2f ef       	ldi	r18, 0xFF	; 255
 134:	8f ef       	ldi	r24, 0xFF	; 255
 136:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return next;
  }
}
 138:	63 2f       	mov	r22, r19
 13a:	72 2f       	mov	r23, r18
 13c:	08 95       	ret

0000013e <_ZN10RingBuffer13store_elementEh>:
void RingBuffer::setup(uint8_t* managed_buffer, uint16_t capacity_){
  buf = managed_buffer;
  capacity = capacity_;
}

bool RingBuffer::store_element(uint8_t data){
 13e:	1f 93       	push	r17
 140:	cf 93       	push	r28
 142:	df 93       	push	r29
 144:	ec 01       	movw	r28, r24
 146:	16 2f       	mov	r17, r22
  if(next_slot() < 0){
 148:	0e 94 7a 00 	call	0xf4	; 0xf4 <_ZN10RingBuffer9next_slotEv>
 14c:	99 23       	and	r25, r25
 14e:	6c f0       	brlt	.+26     	; 0x16a <_ZN10RingBuffer13store_elementEh+0x2c>
    return false;
  }
  
  buf[next_slot()] = data;
 150:	28 81       	ld	r18, Y
 152:	39 81       	ldd	r19, Y+1	; 0x01
 154:	f9 01       	movw	r30, r18
 156:	e6 0f       	add	r30, r22
 158:	f7 1f       	adc	r31, r23
 15a:	10 83       	st	Z, r17
  head = next_slot();
 15c:	ce 01       	movw	r24, r28
 15e:	0e 94 7a 00 	call	0xf4	; 0xf4 <_ZN10RingBuffer9next_slotEv>
 162:	7d 83       	std	Y+5, r23	; 0x05
 164:	6c 83       	std	Y+4, r22	; 0x04
  return true;
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	01 c0       	rjmp	.+2      	; 0x16c <_ZN10RingBuffer13store_elementEh+0x2e>
  capacity = capacity_;
}

bool RingBuffer::store_element(uint8_t data){
  if(next_slot() < 0){
    return false;
 16a:	80 e0       	ldi	r24, 0x00	; 0
  }
  
  buf[next_slot()] = data;
  head = next_slot();
  return true;
}
 16c:	df 91       	pop	r29
 16e:	cf 91       	pop	r28
 170:	1f 91       	pop	r17
 172:	08 95       	ret

00000174 <__vector_13>:
  } else {
    return false;
  }
}

ISR(TIMER1_COMPA_vect){
 174:	1f 92       	push	r1
 176:	0f 92       	push	r0
 178:	0f b6       	in	r0, 0x3f	; 63
 17a:	0f 92       	push	r0
 17c:	11 24       	eor	r1, r1
 17e:	8f 93       	push	r24
  // Restart the processor
  sleep_disable();
 180:	83 b7       	in	r24, 0x33	; 51
 182:	8e 7f       	andi	r24, 0xFE	; 254
 184:	83 bf       	out	0x33, r24	; 51
}
 186:	8f 91       	pop	r24
 188:	0f 90       	pop	r0
 18a:	0f be       	out	0x3f, r0	; 63
 18c:	0f 90       	pop	r0
 18e:	1f 90       	pop	r1
 190:	18 95       	reti

00000192 <_ZN4UART10read_readyEv>:
  for(uint8_t i = 0; i < count; i++){
    send.store_element(buffer[i]);
  }
  enable_send_interrupt();
  return true;
}
 192:	cf 93       	push	r28
 194:	df 93       	push	r29
 196:	ec 01       	movw	r28, r24
 198:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 19c:	86 51       	subi	r24, 0x16	; 22
 19e:	9c 4f       	sbci	r25, 0xFC	; 252
 1a0:	0e 94 9f 00 	call	0x13e	; 0x13e <_ZN10RingBuffer13store_elementEh>
 1a4:	81 11       	cpse	r24, r1
 1a6:	04 c0       	rjmp	.+8      	; 0x1b0 <_ZN4UART10read_readyEv+0x1e>
 1a8:	c6 50       	subi	r28, 0x06	; 6
 1aa:	dc 4f       	sbci	r29, 0xFC	; 252
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	88 83       	st	Y, r24
 1b0:	df 91       	pop	r29
 1b2:	cf 91       	pop	r28
 1b4:	08 95       	ret

000001b6 <_ZN4UART22disable_send_interruptEv>:
 1b6:	e1 ec       	ldi	r30, 0xC1	; 193
 1b8:	f0 e0       	ldi	r31, 0x00	; 0
 1ba:	80 81       	ld	r24, Z
 1bc:	8f 7d       	andi	r24, 0xDF	; 223
 1be:	80 83       	st	Z, r24
 1c0:	08 95       	ret

000001c2 <_ZN4UART11write_readyEv>:
 1c2:	0f 93       	push	r16
 1c4:	1f 93       	push	r17
 1c6:	cf 93       	push	r28
 1c8:	df 93       	push	r29
 1ca:	1f 92       	push	r1
 1cc:	cd b7       	in	r28, 0x3d	; 61
 1ce:	de b7       	in	r29, 0x3e	; 62
 1d0:	8c 01       	movw	r16, r24
 1d2:	19 82       	std	Y+1, r1	; 0x01
 1d4:	be 01       	movw	r22, r28
 1d6:	6f 5f       	subi	r22, 0xFF	; 255
 1d8:	7f 4f       	sbci	r23, 0xFF	; 255
 1da:	86 51       	subi	r24, 0x16	; 22
 1dc:	9c 4f       	sbci	r25, 0xFC	; 252
 1de:	0e 94 58 00 	call	0xb0	; 0xb0 <_ZN10RingBuffer11get_elementEPh>
 1e2:	81 11       	cpse	r24, r1
 1e4:	03 c0       	rjmp	.+6      	; 0x1ec <_ZN4UART11write_readyEv+0x2a>
 1e6:	c8 01       	movw	r24, r16
 1e8:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN4UART22disable_send_interruptEv>
 1ec:	89 81       	ldd	r24, Y+1	; 0x01
 1ee:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 1f2:	0f 90       	pop	r0
 1f4:	df 91       	pop	r29
 1f6:	cf 91       	pop	r28
 1f8:	1f 91       	pop	r17
 1fa:	0f 91       	pop	r16
 1fc:	08 95       	ret

000001fe <__vector_20>:
}




ISR(USART0_RX_vect){
 1fe:	1f 92       	push	r1
 200:	0f 92       	push	r0
 202:	0f b6       	in	r0, 0x3f	; 63
 204:	0f 92       	push	r0
 206:	11 24       	eor	r1, r1
 208:	2f 93       	push	r18
 20a:	3f 93       	push	r19
 20c:	4f 93       	push	r20
 20e:	5f 93       	push	r21
 210:	6f 93       	push	r22
 212:	7f 93       	push	r23
 214:	8f 93       	push	r24
 216:	9f 93       	push	r25
 218:	af 93       	push	r26
 21a:	bf 93       	push	r27
 21c:	ef 93       	push	r30
 21e:	ff 93       	push	r31
  if(!global_handler){
 220:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 224:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_end+0x1>
 228:	00 97       	sbiw	r24, 0x00	; 0
 22a:	11 f0       	breq	.+4      	; 0x230 <__vector_20+0x32>
    return;
  }
  
  global_handler->read_ready();
 22c:	0e 94 c9 00 	call	0x192	; 0x192 <_ZN4UART10read_readyEv>
}
 230:	ff 91       	pop	r31
 232:	ef 91       	pop	r30
 234:	bf 91       	pop	r27
 236:	af 91       	pop	r26
 238:	9f 91       	pop	r25
 23a:	8f 91       	pop	r24
 23c:	7f 91       	pop	r23
 23e:	6f 91       	pop	r22
 240:	5f 91       	pop	r21
 242:	4f 91       	pop	r20
 244:	3f 91       	pop	r19
 246:	2f 91       	pop	r18
 248:	0f 90       	pop	r0
 24a:	0f be       	out	0x3f, r0	; 63
 24c:	0f 90       	pop	r0
 24e:	1f 90       	pop	r1
 250:	18 95       	reti

00000252 <__vector_21>:

ISR(USART0_UDRE_vect){
 252:	1f 92       	push	r1
 254:	0f 92       	push	r0
 256:	0f b6       	in	r0, 0x3f	; 63
 258:	0f 92       	push	r0
 25a:	11 24       	eor	r1, r1
 25c:	2f 93       	push	r18
 25e:	3f 93       	push	r19
 260:	4f 93       	push	r20
 262:	5f 93       	push	r21
 264:	6f 93       	push	r22
 266:	7f 93       	push	r23
 268:	8f 93       	push	r24
 26a:	9f 93       	push	r25
 26c:	af 93       	push	r26
 26e:	bf 93       	push	r27
 270:	ef 93       	push	r30
 272:	ff 93       	push	r31
  if(!global_handler){
 274:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 278:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_end+0x1>
 27c:	00 97       	sbiw	r24, 0x00	; 0
 27e:	11 f0       	breq	.+4      	; 0x284 <__vector_21+0x32>
    return;
  }
  
  global_handler->write_ready();
 280:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <_ZN4UART11write_readyEv>
 284:	ff 91       	pop	r31
 286:	ef 91       	pop	r30
 288:	bf 91       	pop	r27
 28a:	af 91       	pop	r26
 28c:	9f 91       	pop	r25
 28e:	8f 91       	pop	r24
 290:	7f 91       	pop	r23
 292:	6f 91       	pop	r22
 294:	5f 91       	pop	r21
 296:	4f 91       	pop	r20
 298:	3f 91       	pop	r19
 29a:	2f 91       	pop	r18
 29c:	0f 90       	pop	r0
 29e:	0f be       	out	0x3f, r0	; 63
 2a0:	0f 90       	pop	r0
 2a2:	1f 90       	pop	r1
 2a4:	18 95       	reti

000002a6 <_exit>:
 2a6:	f8 94       	cli

000002a8 <__stop_program>:
 2a8:	ff cf       	rjmp	.-2      	; 0x2a8 <__stop_program>
